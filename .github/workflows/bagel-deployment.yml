name: Trigger auto deployment for bagel-cpu

# When will this action be executed
on:
  # Automatically trigger it when detected changes in the repo
  push:
    branches: 
      [ main ]
    paths:
    - '**'
    - '.github/workflows/bagel-deployment.yml'

  # Allow manual trigger 
  workflow_dispatch:      

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions: 
      id-token: write #This is required for requesting the OIDC JWT Token
      contents: read #Required when GH token is used to authenticate with private repo

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and Create ACR if it exists
        run: |
          if ! az acr show --name ${{ vars.ACR_NAME }} > /dev/null 2>&1; then
            echo "Creating ACR: ${{ vars.ACR_NAME }}"
            az acr create --name ${{ vars.ACR_NAME }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --sku Basic --location swedencentral
          else
            echo "ACR already exists: ${{ vars.ACR_NAME }}"
          fi

      - name: Enable Admin User in ACR
        run: |
          az acr update --name ${{ vars.ACR_NAME }} --admin-enabled true
          
      - name: Build and push container image
        run: |
          docker build -t ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.AZURE_APP_NAME }}:latest .
          docker tag ${{ vars.AZURE_APP_NAME }}:latest ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.AZURE_APP_NAME }}:latest
          docker push ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.AZURE_APP_NAME }}:latest

      - name: Create or update Azure Container App Environment
        run: |
          # Check if the Azure Container App Environment exists
          az containerapp env show --name ${{ vars.AZURE_ENVIRONMENT_NAME }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} || \
          az containerapp env create --name ${{ vars.AZURE_ENVIRONMENT_NAME }} \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --location swedencentral

      - name: Create or update Azure Container App 
        run: |
          # Create or update the Azure Container App
          az containerapp show --name ${{ vars.AZURE_APP_NAME }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} || \
          az containerapp create --name ${{ vars.AZURE_APP_NAME }} \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --image ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.AZURE_APP_NAME }}:latest \
            --environment ${{ vars.AZURE_ENVIRONMENT_NAME }} \
            --target-port 8000 \
            --ingress 'external' \
            --cpu 1 --memory 2.0Gi \
            --min-replicas 0 --max-replicas 10 \
            --registry-server ${{ vars.ACR_NAME }}.azurecr.io \
            --revisions-mode 'single' \
            --container-name ${{ vars.AZURE_APP_NAME }}

      - name: Check provisioning state of Azure Container App
        run: |
          PROVISIONING_STATE=$(az containerapp show --name ${{ vars.AZURE_APP_NAME }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv)
            echo "Provisioning state: $PROVISIONING_STATE"
      
      #- name: Deploy to Azure Container App
      #  run: |
      #    az containerapp update \
      #      --name ${{ vars.AZURE_APP_NAME }} \
      #      --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
      #      --image ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.AZURE_APP_NAME }}:latest


